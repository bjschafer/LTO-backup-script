#!/usr/bin/env bash
#-x
set -euo pipefail
# shellcheck source=../bash-stdlib/stdlib.bash
source "$HOME/.local/lib/stdlib.bash"

test -f '.env' && source .env


SCRIPT=$(readlink -f "$0" 2>/dev/null)

# Get todays day like Mon, Tue and so on
NOW=$(date +"%a")

###############################################################################
# log helper functions
LOGDELIM="###############################################################################"
cleanup_log() {
    echo "" > "$LOGFILE"
    echo "" > "$FILELIST"
}
echo_log() {
    >&1 echo "$@"
    echo "$@"  >> "$LOGFILE"
}

error() {
    error_log "$@"
    sendmail_event FAIL
    #exit -1
}

error_log() {
    echo_log "$LOGDELIM"
    echo_log "BACKUP FAILED"
    echo_log "$LOGDELIM"
    echo_log "reason: $*"
    echo_log "$LOGDELIM"
}

###############################################################################
# tape helper functions

wait_for_next_tape() {
    sendmail_event NEXTTAPE
    eject_tape
    echo_log "wait for tape"
    while true
    do
        mt -f /dev/st0 status | grep ONLINE >/dev/null
            rt=$?
            if [[ $rt -eq 0 ]]
            then
            break;
        fi
        sleep 2
    done
}

eject_tape() {
    mt -f /dev/st0 status | grep ONLINE >/dev/null
        rt=$?
    if [[ $rt -eq 0 ]]
    then
        mt -f "$TAPE" rewind
        mt -f "$TAPE" eject
    fi
}



###############################################################################
# helper function for tape change

# turn a count of seconds into hh:mm::ss
# useful with e.g. bash builtin $SECONDS
calc_time()
{
    local seconds="$1"
    printf '%dh:%dm:%ds\n' $((seconds/3600)) $((seconds%3600/60)) $((seconds%60))
}

sendmail_for_backup_needed()
{
    do_sendmail \
        "please start a tapebackup" \
        "A tape backup would be needed now\n" \
        "$( main estimate-tapes )"
}

estimate_size()
{
    local folders="$1"

    du -sbc "$folders" | sed -n "s/\([0-8]*\).*/\1/p" | tail -n1
}

#### Custom functions #####
sendmail_event()
{
    case $1 in
        FULLSTART)
                start_time=$SECONDS
                do_sendmail "Full Backup started" "Full backup started for $BACKUP_DIRS"
            ;;
        FULLEND)
                end_time=$SECONDS
                time=$(( end_time - start_time ))
                time_str=$( calc_time $time )
                if [[ -e $FILELIST ]]
                then
                    tar -cjf "$FILELIST.bz2.tar" "$FILELIST"
                fi

                do_sendmail \
                    "finished backup" \
                    "$FILELIST.bz2.tar" \
                    "sucessfull backuped the following dirs $BACKUP_DIRS \n" \
                    "Time needed was $time_str"
            ;;
        NEXTTAPE)
            do_sendmail "Next Tape please" "test" "Please change tape and not the order."
            ;;
        FAIL)
                end_time=$SECONDS
                time=$(( end_time - start_time ))
                time_str=$( calc_time $time )
                do_sendmail \
                    "failed to backup" \
                    "$TAPENAMES"  \
                    "failed to backup the following dirs $BACKUP_DIRS \n" \
                    "Time needed was $time_str"
            ;;
        *)
                error_log "failed invalid send event"
            ;;
    esac
}

do_sendmail() {
    SUBJECT=$1
    shift
    local attachments

    if [[ -e $LOGFILE ]]
    then
        attachments+=$(uuencode "$LOGFILE" "$(basename "$LOGFILE")")
    fi

    while true
    do
        if [[ -e $1 ]]
        then
            attachments+=$(uuencode "$1" "$(basename "$1")")
            shift
        else
            break
        fi
    done

    BODY=$*

    eval "( echo -e '$BODY' ; $attachments ) | mail root --subject=\"$MAIL_PREFRACE $SUBJECT\" $LOG_ATTACHMENT"
    echo "( echo -e '$BODY' ; $attachments ) | mail root --subject=\"$MAIL_PREFRACE $SUBJECT\" $LOG_ATTACHMENT"
}

###############################################################################
# mount nas directories
mount_nas() {
    if [[ "$HOSTNAME" == "$NAS" ]]
    then
        echo_log "no need to mount nas"
        [[ -e $NAS_MOUNT_DIR ]] || ln -s "$MOUNT_LOCAL" "$NAS_MOUNT_DIR"
    else
        echo_log "mount nas"

        mkdir -p "$NAS_MOUNT_DIR"
        sudo mount.nfs "$MOUNT_NFS" "$NAS_MOUNT_DIR"
    fi
}
###############################################################################

# Make sure all dirs exits
verify() {

    local s=0
    [ -d "$LOGBASE" ] || mkdir -p "$LOGBASE" || ( error_log "error could not create log file -> stop" && s=1)

    echo_log "verify programs"
    for prog in tar mt mbuffer openssl pipemeter compression uuencode ; do
        command_exists "$prog" || ( error_log "$prog is not installed -> stop" && s=1)
    done

    echo_log "verify dirs"
    for d in $BACKUP_DIRS
    do
        local test_dir
        if [[ $d = /* ]]
        then
            test_dir=$d
        else
            test_dir=$NAS_MOUNT_DIR/$d
        fi

        if [ ! -d "$test_dir" ];
        then
            echo_log "Error : $test_dir directory does not exits!"
            s=1
        fi
    done

    [ -e "$TAPE" ] || { error_log "tape is not present at '$TAPE' -> stop" && s=1; }

    [ -e "$KEYFILE" ]  || { error_log "key file is empty please generate one with 'openssl rand 512 > $KEYFILE'" && s=1; }

    # if not; just die
    [ $s -eq 1 ] && error "failed -> stop"
}

print_help() {
    echo "usage:"
        echo "sudo $( basename "$SCRIPT" ) backup-full                                      | do a full backup of all files to the tape drive"
        echo "sudo $( basename "$SCRIPT" ) estimate-tapes                                   | estimates the number of tapes for the backup"
        echo "sudo $( basename "$SCRIPT" ) tape-list                                        | lists the content of the tape drive"
        echo "sudo $( basename "$SCRIPT" ) recover-data <output dir> [selective file list]  | recovers data from the tape drive "
}

#### Main logic ####

# Make sure log dir exits
main() {

    echo_log "today is $NOW"

    # Okay let us start backup procedure
    # If it is monday make a full backup;
    # For Tue to Fri make a partial backup
    # Weekend no backups
    case $1 in
        "backup-full")
                cleanup_log
                mount_nas
                verify
                backup "backup-full"
            ;;
        "tape-list")
                cleanup_log
                verify
                backup "tape-list"
            ;;
        "tape-restore")
                cleanup_log
                verify
                backup "tape-restore" "$@"
            ;;
        "estimate-tapes")
                verify
                backup "estimate-tapes"
            ;;
        *)
                print_help
            ;;
    esac

}

calc() {
    awk "BEGIN{printf \"%.2f\", $1}"
}

# Make a full backup
backup() {
    case $1 in
        backup-full)
            pushd "$NAS_MOUNT_DIR" || return
            echo_log "start full backup"
            sendmail_event FULLSTART
            echo_log "estimate time for $BACKUP_DIRS"
            echo_log "please insert tape in the mean time if not already done"
            size=$( estimate_size "$BACKUP_DIRS")

            echo_log "estimates size is \'$size\'b"
            tar "$TAR_ARGS" -cvf - "$BACKUP_DIRS"  2> "$FILELIST" | \
                pipemeter -s "$size" -a -b "$BLOCKSIZE" -l | \
                "$COMPRESSION_CMD" | \
                openssl enc -aes-256-cbc -pass "file:$KEYFILE" | \
                mbuffer \
                    -A "bash -c \"source $SCRIPT; wait_for_next_tape\"" \
                    -P 95 \
                    -m "$TAPE_BUFF" \
                    -f \
                    -o "$TAPE" \
                    -L \
                    -s "$BLOCKSIZE"
            rt=$?
            if [ ! $rt -eq 0 ]
            then
               error "tar command failed with $rt"
            else
               sendmail_event FULLEND
            fi
            eject_tape
            popd || return
        ;;

    tape-list)
        ;&
    tape-restore)
            if [[ $1 == tape-restore ]]
            then
                OPT="x"
            OUTPUT_DIR="-C $2"
            shift
            else
                OPT="t"
            fi
                shift #remove tape-restor rest is files and paths

            echo please enter the number of tapes to read
            read -r tapes_count

            mbuffer -n "$tapes_count" -i "$TAPE" \
                -A "bash -c \"source $SCRIPT; wait_for_next_tape\"" \
                -P 95 \
                -m 0.5g \
                -f \
                -L \
                -q \
                -s "$BLOCKSIZE" |
                mbuffer enc -d -aes-256-cbc -pass "file:$KEYFILE" |
                "$DECOMPRESSION_CMD" | \
                tar "$TAR_ARGS" "-${OPT}vf" - "$OUTPUT_DIR" "$@" 2> "$FILELIST"
        ;;

    estimate-tapes)
            size=$( estimate_size "$BACKUP_DIRS" )
            echo "$size"

            size_str=$( numfmt --to iec --format "%8.4f" "$size" )

            tapenumer=$( calc "$size/($TAPESIZE)" )
            tapetime=$( calc "$size/($TAPESPEED)" )

            time_str=$( calc_time "$tapetime" )

            echo_log "estimated tapes are $tapenumer for the $size_str"
            echo_log "estimated time is $time_str (not counting the delay of changes)"
            echo_log "with the backup of the following dirs $BACKUP_DIRS"
        ;;

    *)
            error "unkown backup cmd"
        ;;
    esac

}

#### Main logic ####

# Make sure log dir exits

#sendmail "Full Backup started" "Full backup started for $BACKUP_DIRS"

case "$0" in
    *start)
        echo "Script is a subshell"
        main "$@"
        ;;
    *)
        echo "Script is being sourced"
        ;;
esac
#> $LOGFILE 2>&1
